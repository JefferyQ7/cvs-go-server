buildscript {
	ext {
		queryDslVersion = "5.0.0"
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.0'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'com.cvsgo'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	asciidoctorExtensions
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

	// spring rest docs
	asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

	// JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2'

	// for AWS S3 upload
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

	// querydsl
	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta"
	annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}:jakarta"

	// for 실제 쿼리 확인
	implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.8.0'

	//java.lang.NoClassDefFoundError 대응
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api:3.1.0"
}

ext {
	snippetsDir = file('build/generated-snippets')
}

bootJar {
	enabled = true
	dependsOn asciidoctor
	copy {
		from "${asciidoctor.outputDir}/html5"
		into 'build/resources/static/docs'
	}
}

tasks.named('bootJar') {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.named('test') {
	useJUnitPlatform()
	outputs.dir snippetsDir
	finalizedBy 'asciidoctor'
}

asciidoctor {
	configurations 'asciidoctorExtensions'
	inputs.dir snippetsDir
	dependsOn test
}

asciidoctor.doFirst {
	delete file("src/main/resources/static/docs")
}

task copyDocument(type: Copy) {
	dependsOn asciidoctor
	from file("build/docs/asciidoc")
	into file("src/main/resources/static/docs")
}

build {
	dependsOn copyDocument
}

def querydslDir = 'src/main/generated'

tasks.withType(JavaCompile) {
	options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
}

sourceSets {
	main.java.srcDirs += [ querydslDir ]
}

clean {
	delete file(querydslDir)
}
